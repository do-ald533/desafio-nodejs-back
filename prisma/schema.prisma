// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model User {
  id               String        @id @default(uuid())
  name             String
  email            String        @unique
  created_projects Project[]
  password_hash    String
  salt             String
  projects         UserProject[]
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  @@map("users")
}

model UserProject {
  userId    String @map("user_id")
  projectId String @map("project_id")
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, projectId])
  @@map("user_projects")
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String
  members     UserProject[]
  creatorId   String
  creator     User          @relation(fields: [creatorId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  tasks       Task[]

  @@map("projects")
}

model Task {
  id          String     @id @default(uuid())
  title       String     @db.VarChar(255)
  description String
  status      Status
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  tags         TagsTask[]

  @@map("tasks")
}

model TagsTask {
  tagId  String @map("tag_id")
  taskId String @map("task_id")
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([tagId, taskId])
  @@map("tags_task")
}

model Tag {
  id    String     @id @default(uuid())
  title String
  tasks TagsTask[]

  @@map("tags")
}
